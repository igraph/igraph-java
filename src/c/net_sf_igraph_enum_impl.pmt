/* 
   IGraph library Java interface.
   Copyright (C) 2006-2012  Tamas Nepusz <ntamas@gmail.com>
   Pázmány Péter sétány 1/a, 1117 Budapest, Hungary
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 
   02110-1301 USA 

*/

/*

ATTENTION: This is a highly experimental, proof-of-concept Java interface.
Its main purpose was to convince me that it can be done in finite time :)
The interface is highly incomplete, at the time of writing even some
essential functions (e.g. addEdges) are missing. Since I don't use Java
intensively, chances are that this interface gets finished only if there
is substantial demand for it and/or someone takes the time to send patches
or finish it completely.

*/

#include "net_sf_igraph_pmt.h"

/************************** STATIC VARIABLES ***************************/

#define CLASSVAR CONCAT3(igraph, JAVA_TYPE, class)
#define FIELDVAR CONCAT3(igraph, JAVA_TYPE, numericValue_fid)

static jclass CLASSVAR;
static jfieldID FIELDVAR;

/************************ CONVERSION ROUTINES **************************/

/*
 * Initializes the locally cached field IDs
 */
jint FUNCTION(OnLoad)(JNIEnv *env) {
  jclass cls;

  cls = (*env)->FindClass(env, JAVA_PACKAGE_PREFIX "/" JAVA_TYPE_STRING);
  if (cls == 0) return JNI_ERR;
  CLASSVAR = (*env)->NewWeakGlobalRef(env, cls);
  if (CLASSVAR == 0) return JNI_ERR;
  FIELDVAR = (*env)->GetFieldID(env, cls, "numericValue", "I");
  if (FIELDVAR == 0) return JNI_ERR;

  return JNI_OK;
}

/*
 * Releases the weak references held
 */
void FUNCTION(OnUnload)(JNIEnv *env) {
  (*env)->DeleteWeakGlobalRef(env, CLASSVAR);
  CLASSVAR = 0;
}

/*
 * Converts a Java enum type to an igraph enum type
 * @return:  zero if everything went fine, 1 if a null pointer was passed
 */
int FUNCTION(to_igraph)(JNIEnv *env, jobject jobj, C_TYPE *result) {
  if (jobj == 0)
    return 1;
  *result = (*env)->GetIntField(env, jobj, FIELDVAR);
  return 0;
}



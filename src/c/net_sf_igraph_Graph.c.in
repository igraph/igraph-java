/* 
   IGraph library Java interface.
   Copyright (C) 2006-2012  Tamas Nepusz <ntamas@gmail.com>
   Pázmány Péter sétány 1/a, 1117 Budapest, Hungary
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 
   02110-1301 USA 

*/

/*

ATTENTION: This is a highly experimental, proof-of-concept Java interface.
Its main purpose was to convince me that it can be done in finite time :)
The interface is highly incomplete, at the time of writing even some
essential functions (e.g. addEdges) are missing. Since I don't use Java
intensively, chances are that this interface gets finished only if there
is substantial demand for it and/or someone takes the time to send patches
or finish it completely.

*/

#include "net_sf_igraph_Graph.h"
#include <igraph/igraph.h>
#include "config.h"
#include "conversion.h"
#include "jni_utils.h"

#include "net_sf_igraph_enums.h"
#include "net_sf_igraph_VertexSet.h"

/************************** STATIC VARIABLES ***************************/

jclass net_sf_igraph_Graph_class;
jfieldID net_sf_igraph_Graph_handle_fid;
jmethodID net_sf_igraph_Graph_constructor_mid;

/*********************** INITIALIZER FUNCTION **************************/

jint Java_net_sf_igraph_Graph_OnLoad(JNIEnv *env) {
  jclass cls;

  cls = (*env)->FindClass(env, JAVA_PACKAGE_PREFIX "/Graph");
  if (cls == 0) return JNI_ERR;

  net_sf_igraph_Graph_class = (*env)->NewWeakGlobalRef(env, cls);
  if (net_sf_igraph_Graph_class == 0) return JNI_ERR;

  net_sf_igraph_Graph_handle_fid = (*env)->GetFieldID(env, cls, "handle", "J");
  if (net_sf_igraph_Graph_handle_fid == 0) return JNI_ERR;

  net_sf_igraph_Graph_constructor_mid = (*env)->GetMethodID(env, cls, "<init>", "(J)V");
  if (net_sf_igraph_Graph_constructor_mid == 0) return JNI_ERR;

  return JNI_OK;
}

void Java_net_sf_igraph_Graph_OnUnload(JNIEnv *env) {
  (*env)->DeleteWeakGlobalRef(env, net_sf_igraph_Graph_class);
  net_sf_igraph_Graph_class = 0;
}

/************************ DESTRUCTOR ROUTINES **************************/

/*
 * Frees the underlying igraph_t object
 */
void Java_net_sf_igraph_Graph_destroy(JNIEnv *env, jobject jobj) {
  igraph_t *g;
  if (Java_jobject_to_igraph(env, jobj, &g)) return;
  if (g == 0) return;
  igraph_destroy(g);
  free(g);
}

/*********** THE REST OF THIS FILE IS GENERATED BY stimulus.py *************/

